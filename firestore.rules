rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for permission checks
    
    // Check if user is authenticated (for moderators/admins)
    function isAuthenticated() {
      return request.auth != null && request.auth.token.email_verified;
    }
    
    // Check if user is member of organization
    function isOrgMember(orgId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid));
    }
    
    // Check if user is organization admin
    function isOrgAdmin(orgId) {
      return isOrgMember(orgId) && 
        get(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Check if user is session moderator
    function isSessionModerator(sessionId) {
      let session = get(/databases/$(database)/documents/sessions/$(sessionId));
      return isOrgMember(session.data.organizationId) &&
        get(/databases/$(database)/documents/organizations/$(session.data.organizationId)/members/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }
    
    // Check if anonymous user is participant in session
    function isSessionParticipant(sessionId) {
      // Anonymous users use custom tokens with sessionId and participantId
      return request.auth != null && 
        request.auth.token.sessionId == sessionId &&
        request.auth.token.participantId != null;
    }
    
    // ORGANIZATION RULES - Complete isolation between orgs
    match /organizations/{orgId} {
      // Only org members can read org data
      allow read: if isOrgMember(orgId);
      
      // Only admins can update org settings
      allow update: if isOrgAdmin(orgId);
      
      // No creation/deletion through client SDK
      allow create, delete: if false;
      
      // Organization members subcollection
      match /members/{memberId} {
        allow read: if isOrgMember(orgId);
        allow write: if isOrgAdmin(orgId);
      }
    }
    
    // SESSION RULES - Core permission model
    match /sessions/{sessionId} {
      // Public sessions readable by anyone
      // Private sessions only by org members
      allow read: if resource.data.config.anonymous == true || 
                     isOrgMember(resource.data.organizationId) ||
                     isSessionParticipant(sessionId);
      
      // Only moderators can create/update sessions
      allow create: if isOrgMember(request.resource.data.organizationId);
      allow update: if isSessionModerator(sessionId);
      allow delete: if false; // Soft delete only
      
      // SESSION MESSAGES - Anonymous creation, no editing
      match /messages/{messageId} {
        // Participants and moderators can read
        allow read: if isSessionParticipant(sessionId) || 
                       isSessionModerator(sessionId);
        
        // Participants can create messages (anonymous)
        // Enforce anonymous ID matches token
        allow create: if isSessionParticipant(sessionId) &&
                        request.resource.data.authorId == request.auth.token.participantId &&
                        request.resource.data.type == 'participant';
        
        // Moderators can create special messages
        allow create: if isSessionModerator(sessionId) &&
                        request.resource.data.type in ['moderator', 'prober'];
        
        // No one can update or delete messages (immutable)
        allow update, delete: if false;
      }
      
      // SESSION VOTES - One vote per participant per message
      match /votes/{voteId} {
        // Only moderators can read votes (for analytics)
        allow read: if isSessionModerator(sessionId);
        
        // Participants can create votes
        // Enforce one vote per message
        allow create: if isSessionParticipant(sessionId) &&
                        request.resource.data.voterId == request.auth.token.participantId &&
                        !exists(/databases/$(database)/documents/sessions/$(sessionId)/votes/$(request.resource.data.voterId + '_' + request.resource.data.messageId));
        
        // No updates or deletes
        allow update, delete: if false;
      }
      
      // SESSION PARTICIPANTS - Track anonymous users
      match /participants/{participantId} {
        // Moderators can read participant list
        allow read: if isSessionModerator(sessionId);
        
        // System creates participant records
        allow create, update: if false; // Cloud Functions only
        allow delete: if false;
      }
    }
    
    // ANALYSIS RESULTS - AI insights
    match /analysis/{analysisId} {
      // Only session moderators can read analysis
      allow read: if isSessionModerator(resource.data.sessionId);
      
      // Only Cloud Functions can write analysis
      allow write: if false;
    }
    
    // ACCESS LOGS - Audit trail
    match /accessLogs/{logId} {
      // Only org admins can read logs
      allow read: if isOrgAdmin(resource.data.organizationId);
      
      // Only Cloud Functions can write logs
      allow write: if false;
    }
    
    // Catch-all: Deny access to any unmatched documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}