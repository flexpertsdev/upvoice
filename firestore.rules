rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isSessionModerator(sessionId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/sessions/$(sessionId)) &&
        get(/databases/$(database)/documents/sessions/$(sessionId)).data.moderatorId == request.auth.uid;
    }
    
    function isSessionParticipant(sessionId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/sessions/$(sessionId)/participants/$(request.auth.uid));
    }
    
    function canJoinSession(sessionId) {
      let session = get(/databases/$(database)/documents/sessions/$(sessionId));
      let accessControl = session.data.configuration.accessControl;
      
      return isAuthenticated() && 
        session.data.status in ['waiting', 'active'] &&
        (
          accessControl.type == 'open' ||
          (accessControl.type == 'domain' && request.auth.token.email.matches('.*@(' + accessControl.domains.join('|') + ')$')) ||
          (accessControl.type == 'allowlist' && request.auth.token.email in accessControl.allowedEmails)
        );
    }
    
    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && 
        (isSessionModerator(sessionId) || isSessionParticipant(sessionId));
      allow create: if isAuthenticated();
      allow update: if isSessionModerator(sessionId);
      allow delete: if false; // Never delete sessions
      
      // Participants subcollection
      match /participants/{participantId} {
        allow read: if isSessionParticipant(sessionId) || isSessionModerator(sessionId);
        allow create: if isAuthenticated() && 
          participantId == request.auth.uid &&
          canJoinSession(sessionId);
        allow update: if isAuthenticated() && 
          (participantId == request.auth.uid || isSessionModerator(sessionId));
        allow delete: if false;
      }
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isSessionParticipant(sessionId);
        allow create: if isSessionParticipant(sessionId) &&
          request.resource.data.authorId == request.auth.uid + '_' + sessionId;
        allow update: if false; // Messages are immutable
        allow delete: if false;
      }
      
      // Votes subcollection
      match /votes/{voteId} {
        allow read: if isSessionModerator(sessionId);
        allow write: if isSessionParticipant(sessionId) &&
          request.resource.data.participantId == request.auth.uid + '_' + sessionId;
      }
      
      // Topics subcollection
      match /topics/{topicId} {
        allow read: if isSessionParticipant(sessionId);
        allow write: if isSessionModerator(sessionId);
      }
    }
    
    // Organizations collection
    match /organizations/{orgId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.members;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.admins;
      allow create: if isAuthenticated();
      allow delete: if false;
      
      // Teams subcollection
      match /teams/{teamId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.members;
        allow write: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.admins;
      }
    }
    
    // AI Insights collection (server-side only)
    match /insights/{insightId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can write
    }
  }
}